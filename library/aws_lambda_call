#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
   Ansible module for AWS Lambda call.
   Support ivan.bogomazov@gmail.com
   Minsk 2016

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
"""
from __future__ import unicode_literals

import json

import boto3
from botocore.config import Config


class LambdaFunction(object):
    """
        AWS Lambda wrapper
        Usage:
        >>> lambda_func = LambdaFunction('lambda_function_name', 'us-east-1')
        >>> type(lambda_func)
        <class 'lambda_wrapper.LambdaFunction'>
    """

    def __init__(self,
                 function_name,
                 region_name,
                 aws_access_key_id=None,
                 aws_secret_access_key=None,
                 ):
        """
        :param function_name: AWS Lambda function name
        :type str
        :param region_name  AWS region
        :type str
        :param aws_access_key_id
        :type str
        :param aws_secret_access_key
        :type str
         :rtype str
        """
        settings = {
            "region_name": region_name,
            "aws_access_key_id": aws_access_key_id,
            "aws_secret_access_key": aws_secret_access_key,
            "config": Config(read_timeout=300)
        }
        self.client = boto3.client('lambda', **settings)
        self.function_name = function_name

    def __call__(self, payload, async=True):
        """
        :param payload: payload object, must be json serializable
        :param async: Flag for async call
        :return: None for async call or AWS Lambda function result
        """

        invocation = "Event" if async else "RequestResponse"
        kwargs = dict(
            FunctionName=self.function_name,
            Payload=json.dumps(payload),
            InvocationType=invocation
        )

        response = self.client.invoke(**kwargs)
        if not async and 'Payload' in response:
            return response['Payload'].read()


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            region=dict(required=True),
            payload=dict(required=False, type='dict'),
            access_key=dict(default=None, type='str', aliases=['aws_access_key']),
            secret_key=dict(default=None, type='str', no_log=True, aliases=['aws_secret_key, aws_access_secret_key']),
        )
    )

    lambda_func = LambdaFunction(
        module.params['name'],
        module.params['region'],
        module.params['access_key'],
        module.params['secret_key'],
    )
    try:
        response = lambda_func(module.params['payload'], async=False)
        module.exit_json(msg="{}".format(response))

    except Exception as e:
        module.fail_json(msg="Something fatal happened, {}".format(e))


# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
if __name__ == '__main__':
    main()
